{"version":3,"file":"static/js/8.d39cfe2b.chunk.js","mappings":"0SAiBMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAAS,4BAC5BC,MAAOJ,EAAAA,KAAaI,QAAQD,SAAS,6BACrCE,SAAUL,EAAAA,KAAaG,SAAS,kCAyFlC,UAtFkB,WAChB,OAA8BG,EAAAA,EAAAA,UAAS,CACrCF,MAAO,GACPC,SAAU,KAFZ,eAAOE,EAAP,KAAcC,EAAd,KAIIC,GAAWC,EAAAA,EAAAA,MACTC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdV,EAAgBU,EAAhBV,KAAMW,EAAUD,EAAVC,MACdL,GAAa,SAAAM,GACX,OAAO,kBAAKA,GAAZ,cAAwBZ,EAAOW,GAChC,GACF,EAYKE,EAAQ,WACZP,EAAa,CAAEJ,MAAO,GAAIC,SAAU,IACrC,EAGKW,EAAeC,IAAAA,WACfC,EAAkBD,IAAAA,WAEhBb,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,SAGjB,OAFgBc,EAAAA,EAAAA,IAAYC,EAAAA,KAGnB,SAAC,KAAD,CAAUC,GAAG,eAGlB,4BACE,SAAC,KAAD,uBAEA,SAAC,KAAD,CAAQC,iBAAkBvB,EAA1B,UACE,UAAC,KAAD,CAAUwB,SA7BK,SAAAC,GACnBA,EAAMC,iBAENhB,GAASiB,EAAAA,EAAAA,IAAM,CAACtB,MAAAA,EAAOC,SAAAA,KAIvBU,GACD,EAqBK,WAEE,UAAC,KAAD,CAAOY,QAASX,EAAhB,mBAEE,SAAC,KAAD,CACEY,SAAUjB,EACVkB,KAAK,QACL3B,KAAK,QACL4B,YAAY,0BACZjB,MAAOT,EACP2B,GAAIf,EACJb,UAAQ,KAEV,SAAC,KAAD,CAAO6B,UAAU,MAAM9B,KAAK,cAG9B,UAAC,KAAD,CAAOyB,QAAST,EAAhB,sBAEE,SAAC,KAAD,CACEU,SAAUjB,EACVkB,KAAK,WACL3B,KAAK,WACL4B,YAAY,qBACZjB,MAAOR,EACP0B,GAAIb,EACJf,UAAQ,KAEV,SAAC,KAAD,CAAO6B,UAAU,MAAM9B,KAAK,iBAI9B,SAAC,IAAD,CAAQ+B,QAAQ,kBAAkBJ,KAAK,SAAvC,2BAOT,C,qMCpGYK,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+NAYTE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,qFAMLI,EAAQJ,EAAAA,GAAAA,GAAH,qFAMLK,GAAWL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,+HAQRO,EAAQP,EAAAA,GAAAA,MAAH,8GAQIA,EAAAA,GAAAA,OAAH,yX","sources":["components/Pages/LoginPage/LoginPage.jsx","components/Pages/RegistrationPage/RegistrationPage.styled.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport shortid from 'shortid';\nimport * as yup from 'yup';\nimport {\n  Title,\n  FormInput,\n  Label,\n  FormWrap,\n  Error,\n} from 'components/Pages/RegistrationPage/RegistrationPage.styled';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from 'redux/auth/auth-operations';\nimport { Navigate } from 'react-router-dom';\nimport { isUserLogin } from 'redux/auth/auth-selectors';\n// import { fetchAllContacts } from 'redux/contacts/contacts-operations';\nconst schema = yup.object().shape({\n  name: yup.string().required('Name is a required field'),\n  email: yup.string().email().required('Email is a required field'),\n  password: yup.string().required('Password is a required field'),\n});\n\nconst LoginPage = () => {\n  const [state, setFormState] = useState({\n    email: '',\n    password: '',\n  });\nconst dispatch = useDispatch();\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setFormState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    \n    dispatch(login({email, password}));\n    // dispatch(fetchAllContacts());\n    // console.log('LOG IN FORM', state);\n\n    reset();\n  };\n\n  const reset = () => {\n    setFormState({ email: '', password: '' });\n  };\n\n  \n  const emailInputId = shortid.generate();\n  const passwordInputId = shortid.generate();\n\n  const { email, password } = state;\nconst isLogin = useSelector(isUserLogin);\n\nif (isLogin) {\n  return <Navigate to=\"/contacts\" />;\n}\n  return (\n    <div>\n      <Title>Log In </Title>\n\n      <Formik validationSchema={schema}>\n        <FormWrap onSubmit={handleSubmit}>\n          \n          <Label htmlFor={emailInputId}>\n            Email\n            <FormInput\n              onChange={handleChange}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Type your email address\"\n              value={email}\n              id={emailInputId}\n              required\n            />\n            <Error component=\"div\" name=\"email\" />\n          </Label>\n\n          <Label htmlFor={passwordInputId}>\n            Password\n            <FormInput\n              onChange={handleChange}\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Type your password\"\n              value={password}\n              id={passwordInputId}\n              required\n            />\n            <Error component=\"div\" name=\"password\" />\n          </Label>\n          {/* \n            <Button type=\"submit\">Register</Button> */}\n          <Button variant=\"outline-primary\" type=\"submit\">\n            Log In\n          </Button>\n        </FormWrap>\n      </Formik>\n    </div>\n  );\n};\n\n// Form.propTypes = {\n//   submitPropValue: PropTypes.func.isRequired,\n// };\n\nexport default LoginPage;\n","import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormInput = styled(Field)`\n  border-radius: 10px;\n  margin: 10px auto;\n  min-width: 500px;\n  height: 30px;\n  border: 1px solid lightgray;\n  padding: 5px;\n  font-size: 16px;\n  display: block;\n  justify-content: right;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 5px;\n  font-size: 12px;\n  color: orangered;\n`;\n\nexport const Title = styled.h1`\n  font-weight: 700;\n  text-align: center;\n  margin: 20px;\n`;\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 600px;\n  margin: auto;\n`;\n\nexport const Label = styled.label`\ndisplay: block;\njustify-content:left;\n  margin: 10px auto;\n  font-size: 16px;\n  \n`;\n\nexport const Button = styled.button`\n  margin: 20px auto;\n  outline: none;\n  padding: 10px 20px;\n  width: 150px;\n  color: #221212;\n  background-color: lightgray;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: 16px;\n  &:hover,\n  &:focus {\n    border: 1px solid black;\n    background-color: inherit;\n  }\n`;\n"],"names":["schema","yup","shape","name","required","email","password","useState","state","setFormState","dispatch","useDispatch","handleChange","target","value","prevState","reset","emailInputId","shortid","passwordInputId","useSelector","isUserLogin","to","validationSchema","onSubmit","event","preventDefault","login","htmlFor","onChange","type","placeholder","id","component","variant","FormInput","styled","Field","Error","ErrorMessage","Title","FormWrap","Form","Label"],"sourceRoot":""}