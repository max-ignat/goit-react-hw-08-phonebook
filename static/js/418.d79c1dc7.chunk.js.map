{"version":3,"file":"static/js/418.d79c1dc7.chunk.js","mappings":"4SAUMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAAS,4BAC5BC,MAAOJ,EAAAA,KAAaI,QAAQD,SAAS,6BACrCE,SAAUL,EAAAA,KAAaG,SAAS,kCAyGlC,UApGyB,WACvB,IAAMG,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5B,GAA8BC,EAAAA,EAAAA,UAAS,CACrCP,KAAM,GACNE,MAAO,GACPC,SAAU,KAHZ,eAAOK,EAAP,KAAcC,EAAd,KAKIC,GAAWC,EAAAA,EAAAA,MACTC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdb,EAAgBa,EAAhBb,KAAMc,EAAUD,EAAVC,MACdL,GAAa,SAAAM,GACX,OAAO,kBAAKA,GAAZ,cAAwBf,EAAOc,GAChC,GACF,EAWKE,EAAQ,WACZP,EAAa,CAAET,KAAM,GAAIE,MAAO,GAAIC,SAAU,IAC/C,EAEKc,EAAcC,IAAAA,WACdC,EAAeD,IAAAA,WACfE,EAAkBF,IAAAA,WAEhBlB,EAA0BQ,EAA1BR,KAAME,EAAoBM,EAApBN,MAAOC,EAAaK,EAAbL,SAErB,OAAIC,GACG,SAAC,KAAD,CAAUiB,GAAG,eAIlB,4BACE,SAAC,KAAD,iCAEA,SAAC,KAAD,CAAQC,iBAAkBzB,EAA1B,UACE,UAAC,KAAD,CAAU0B,SA5BK,SAAAC,GACnBA,EAAMC,iBAGNf,GAASgB,EAAAA,EAAAA,IAAOlB,IAEhBQ,GACD,EAqBK,WACE,UAAC,KAAD,CAAOW,QAASV,EAAhB,kBAEE,SAAC,KAAD,CACEW,SAAUhB,EACViB,KAAK,OACL7B,KAAK,OACL8B,YAAY,iBACZhB,MAAOd,EACP+B,GAAId,EACJhB,UAAQ,KAEV,SAAC,KAAD,CAAO+B,UAAU,MAAMhC,KAAK,aAG9B,UAAC,KAAD,CAAO2B,QAASR,EAAhB,mBAEE,SAAC,KAAD,CACES,SAAUhB,EACViB,KAAK,QACL7B,KAAK,QACL8B,YAAY,0BACZhB,MAAOZ,EACP6B,GAAIZ,EACJlB,UAAQ,KAEV,SAAC,KAAD,CAAO+B,UAAU,MAAMhC,KAAK,cAG9B,UAAC,KAAD,CAAO2B,QAASP,EAAhB,sBAEE,SAAC,KAAD,CACEQ,SAAUhB,EACViB,KAAK,WACL7B,KAAK,WACL8B,YAAY,qBACZhB,MAAOX,EACP4B,GAAIX,EACJnB,UAAQ,KAEV,SAAC,KAAD,CAAO+B,UAAU,MAAMhC,KAAK,iBAI9B,SAAC,IAAD,CAAQiC,QAAQ,kBAAkBJ,KAAK,SAAvC,6BAOT,C,qMC7GYK,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+NAYTE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,qFAMLI,EAAQJ,EAAAA,GAAAA,GAAH,qFAMLK,GAAWL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,+HAQRO,EAAQP,EAAAA,GAAAA,MAAH,8GAQIA,EAAAA,GAAAA,OAAH,yX","sources":["components/Pages/RegistrationPage/RegistrationPage.jsx","components/Pages/RegistrationPage/RegistrationPage.styled.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport shortid from 'shortid';\nimport * as yup from 'yup';\nimport { Title, FormInput, Label, FormWrap, Error } from 'components/Pages/RegistrationPage/RegistrationPage.styled';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signup } from 'redux/auth/auth-operations';\nimport { isUserLogin } from 'redux/auth/auth-selectors';\nimport { Navigate } from 'react-router-dom';\nconst schema = yup.object().shape({\n  name: yup.string().required('Name is a required field'),\n  email: yup.string().email().required('Email is a required field'),\n  password: yup.string().required('Password is a required field'),\n});\n\n\n\nconst RegistrationPage = () => {\n  const isLogin = useSelector(isUserLogin);\n  const [state, setFormState] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\nconst dispatch = useDispatch();\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setFormState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSignUp = event => {\n    event.preventDefault();\n    // console.log('REGISTER FORM',state);\n    // onSubmit(state);\n    dispatch(signup(state));\n\n    reset();\n  };\n\n  const reset = () => {\n    setFormState({ name: '', email: '', password: '' });\n  };\n\n  const nameInputId = shortid.generate();\n  const emailInputId = shortid.generate();\n  const passwordInputId = shortid.generate();\n\n  const { name, email, password } = state;\n\n  if (isLogin) {\n  return <Navigate to='/contacts'/>\n}\n\n  return (\n    <div>\n      <Title>Registration Form</Title>\n\n      <Formik validationSchema={schema}>\n        <FormWrap onSubmit={handleSignUp}>\n          <Label htmlFor={nameInputId}>\n            Name\n            <FormInput\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Type your name\"\n              value={name}\n              id={nameInputId}\n              required\n            />\n            <Error component=\"div\" name=\"name\" />\n          </Label>\n\n          <Label htmlFor={emailInputId}>\n            Email\n            <FormInput\n              onChange={handleChange}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Type your email address\"\n              value={email}\n              id={emailInputId}\n              required\n            />\n            <Error component=\"div\" name=\"email\" />\n          </Label>\n\n          <Label htmlFor={passwordInputId}>\n            Password\n            <FormInput\n              onChange={handleChange}\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Type your password\"\n              value={password}\n              id={passwordInputId}\n              required\n            />\n            <Error component=\"div\" name=\"password\" />\n          </Label>\n          {/* \n            <Button type=\"submit\">Register</Button> */}\n          <Button variant=\"outline-primary\" type=\"submit\">\n            Register\n          </Button>\n        </FormWrap>\n      </Formik>\n    </div>\n  );\n};\n\n// Form.propTypes = {\n//   submitPropValue: PropTypes.func.isRequired,\n// };\n\nexport default RegistrationPage;","import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormInput = styled(Field)`\n  border-radius: 10px;\n  margin: 10px auto;\n  min-width: 500px;\n  height: 30px;\n  border: 1px solid lightgray;\n  padding: 5px;\n  font-size: 16px;\n  display: block;\n  justify-content: right;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 5px;\n  font-size: 12px;\n  color: orangered;\n`;\n\nexport const Title = styled.h1`\n  font-weight: 700;\n  text-align: center;\n  margin: 20px;\n`;\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 600px;\n  margin: auto;\n`;\n\nexport const Label = styled.label`\ndisplay: block;\njustify-content:left;\n  margin: 10px auto;\n  font-size: 16px;\n  \n`;\n\nexport const Button = styled.button`\n  margin: 20px auto;\n  outline: none;\n  padding: 10px 20px;\n  width: 150px;\n  color: #221212;\n  background-color: lightgray;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: 16px;\n  &:hover,\n  &:focus {\n    border: 1px solid black;\n    background-color: inherit;\n  }\n`;\n"],"names":["schema","yup","shape","name","required","email","password","isLogin","useSelector","isUserLogin","useState","state","setFormState","dispatch","useDispatch","handleChange","target","value","prevState","reset","nameInputId","shortid","emailInputId","passwordInputId","to","validationSchema","onSubmit","event","preventDefault","signup","htmlFor","onChange","type","placeholder","id","component","variant","FormInput","styled","Field","Error","ErrorMessage","Title","FormWrap","Form","Label"],"sourceRoot":""}